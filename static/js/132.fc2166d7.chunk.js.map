{"version":3,"file":"static/js/132.fc2166d7.chunk.js","mappings":"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","sources":["components/Common/FormsComponents.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/EditContactForm/EditContactForm.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/Modal/Modal.jsx","components/Modal/Modal.styled.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["// Libs\nimport styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  padding: 16px;\n  border: 1px solid #505050;\n  border-radius: 12px;\n  background-color: #f8f8ff;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  padding-left: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled.input`\n  height: 32px;\n  padding: 16px;\n  font-size: 16px;\n  color: #505050;\n  border: none;\n  border-radius: 8px;\n  outline: ${({ validate }) =>\n    validate ? '1px solid #fc8181' : '1px solid #505050'};\n  outline-offset: -1px;\n\n  &:focus {\n    outline: ${({ validate }) =>\n      validate ? '2px solid #fc8181' : '2px solid #505050'};\n    outline-offset: -2px;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  height: 32px;\n  padding: 4px 12px;\n  min-width: 110px;\n  text-transform: uppercase;\n  font-weight: 700;\n  background-color: #008000;\n  color: #ffffff;\n  text-shadow: 1px 1px 2px #505050;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #006f00;\n  }\n\n  &:disabled {\n    cursor: initial;\n    background-color: #505050;\n  }\n`;\n\nexport const ValidationMessage = styled.span`\n  padding: 0 16px;\n  color: #fc8181;\n`;\n","// Libs\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { ImPhone, ImCross, ImPencil } from 'react-icons/im';\nimport PropTypes from 'prop-types';\n// Redux operations\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n// React components\nimport { CenteredLoader } from 'components/Loaders/Loaders';\n// Styled components\nimport {\n  ListItem,\n  Name,\n  Number,\n  ActionsWrap,\n  CallLink,\n  EditBtn,\n  RemoveBtn,\n  ContactWrap,\n} from './ContactListItem.styled';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\nimport { Modal } from 'components/Modal/Modal';\n\nexport const ContactListItem = ({ id, contactName, contactNumber }) => {\n  const [isRemoving, setIsRemoving] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleModalOpen = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleRemoveContact = () => {\n    setIsRemoving(true);\n\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(response =>\n        toast.success(`Contact \"${response.name}\" is successfully removed.`)\n      )\n      .catch(() =>\n        toast.error('Oops... Something went wrong :( Please try again later.')\n      )\n      .finally(() => {\n        setIsRemoving(false);\n      });\n  };\n\n  return (\n    <>\n      <ListItem>\n        <ContactWrap>\n          <Name>{contactName}:</Name>\n          <Number>{contactNumber}</Number>\n        </ContactWrap>\n\n        <ActionsWrap>\n          <CallLink href={`tel:${contactNumber}`}>\n            <ImPhone />\n          </CallLink>\n\n          <EditBtn type=\"button\" onClick={handleModalOpen}>\n            <ImPencil />\n          </EditBtn>\n\n          <RemoveBtn\n            type=\"button\"\n            disabled={isRemoving}\n            onClick={handleRemoveContact}\n          >\n            {isRemoving ? <CenteredLoader /> : <ImCross />}\n          </RemoveBtn>\n        </ActionsWrap>\n      </ListItem>\n\n      {isModalOpen && (\n        <Modal handleModalClose={handleModalClose}>\n          <EditContactForm\n            id={id}\n            contactName={contactName}\n            contactNumber={contactNumber}\n            handleModalClose={handleModalClose}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 34px;\n  border: 1px solid #505050;\n  border-radius: 16px;\n  background-color: #ffffff;\n  overflow: hidden;\n\n  @media screen and (max-width: 480px) {\n    height: 48px;\n  }\n`;\n\nexport const ContactWrap = styled.div`\n  display: flex;\n  gap: 12px;\n  padding: 8px 16px;\n  overflow: hidden;\n\n  @media screen and (max-width: 480px) {\n    flex-direction: column;\n    gap: 6px;\n  }\n`;\n\nexport const Name = styled.p`\n  font-weight: 500;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  @media screen and (max-width: 480px) {\n    flex-direction: column;\n    gap: 4px;\n  }\n`;\n\nexport const Number = styled.p`\n  font-weight: 400;\n\n  @media screen and (max-width: 480px) {\n    font-size: 12px;\n  }\n`;\n\nexport const ActionsWrap = styled.div`\n  display: flex;\n  height: 100%;\n  border-left: 1px solid black;\n  background-color: #e1e1e1;\n`;\n\nconst commonActionsStyles = `\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 36px;\n  height: 100%;\n  padding: 0;\n  border: none;\n  cursor: pointer;\n  color: #505050;\n  background-color: transparent;\n  transition: color 250ms linear, transform 250ms linear;\n\n  &:disabled:hover,\n  &:disabled:focus {\n   color: #505050;\n  }\n`;\n\nexport const CallLink = styled.a`\n  ${commonActionsStyles}\n\n  &:hover,\n  &:focus {\n    color: #008000;\n  }\n`;\n\nexport const EditBtn = styled.button`\n  ${commonActionsStyles}\n\n  &:hover,\n  &:focus {\n    color: #ffc800;\n  }\n`;\n\nexport const RemoveBtn = styled.button`\n  ${commonActionsStyles}\n\n  &:hover,\n  &:focus {\n    color: #ff9a9a;\n  }\n`;\n","// Libs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\n// Redux selectors\nimport { selectIsLoading } from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { editContact } from 'redux/contacts/contactsOperations';\n// React components\nimport { CenteredLoader } from 'components/Loaders/Loaders';\n// Styled components\nimport {\n  Form,\n  Label,\n  InputHeading,\n  Input,\n  SubmitBtn,\n  ValidationMessage,\n} from 'components/Common/FormsComponents.styled';\nimport { Heading } from './EditContactForm.styled';\n\nconst validationSchema = (() => {\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const numberRegExp =\n    /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\n  return Yup.object().shape({\n    name: Yup.string()\n      .required('Name is required')\n      .min(3, 'Name must be at least 3 letters long.')\n      .matches(\n        nameRegExp,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n\n    number: Yup.string()\n      .required('Number is required')\n      .matches(\n        numberRegExp,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with \"+\".'\n      ),\n  });\n})();\n\nexport const EditContactForm = ({\n  id,\n  contactName,\n  contactNumber,\n  handleModalClose,\n}) => {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const {\n    formState: { errors, isDirty, isValid },\n    register,\n    handleSubmit,\n    reset,\n  } = useForm({\n    defaultValues: { name: contactName, number: contactNumber },\n    mode: 'onTouched',\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = formData => {\n    dispatch(editContact({ id, changes: formData }))\n      .unwrap()\n      .then(() => {\n        toast.success('Your changes have been successfully saved.');\n        handleModalClose();\n        reset();\n      })\n      .catch(() =>\n        toast.error('Oops... Something went wrong :( Please try again later.')\n      );\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Heading>Edit contact</Heading>\n      <Label>\n        <InputHeading>Name</InputHeading>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          validate={errors.name}\n          {...register('name')}\n        />\n        {errors.name && (\n          <ValidationMessage>{errors.name?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <Label>\n        <InputHeading>Number</InputHeading>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          validate={errors.number}\n          {...register('number')}\n        />\n        {errors.number && (\n          <ValidationMessage>{errors.number?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <SubmitBtn type=\"submit\" disabled={!isValid || !isDirty || isLoading}>\n        {isDirty && isLoading ? <CenteredLoader /> : 'Save changes'}\n      </SubmitBtn>\n    </Form>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Heading = styled.p`\n  width: 100%;\n  padding-bottom: 16px;\n  font-weight: 700;\n  font-size: 20px;\n  /* text-align: center; */\n  padding-left: 16px;\n  /* text-transform: uppercase; */\n  border-bottom: 1px solid #505050;\n`;\n","// Libs\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ImCross } from 'react-icons/im';\nimport PropTypes from 'prop-types';\n// Styled components\nimport { Overlay, ModalWindow, CloseBtn } from './Modal.styled';\n\nexport const Modal = ({ handleModalClose, children }) => {\n  useEffect(() => {\n    const handleEscKeydown = evt => {\n      const KEY_CODE = 'Escape';\n\n      if (evt.key === KEY_CODE) {\n        handleModalClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscKeydown);\n    document.documentElement.style.overflowY = 'hidden';\n\n    return () => {\n      document.removeEventListener('keydown', handleEscKeydown);\n      document.documentElement.style.overflowY = 'unset';\n    };\n  }, [handleModalClose]);\n\n  const handleBackdropClick = evt => {\n    if (evt.target === evt.currentTarget) {\n      handleModalClose();\n    }\n  };\n\n  const backdropRootPortal = document.querySelector('#backdrop-root');\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalWindow>\n        <CloseBtn onClick={handleModalClose}>\n          <ImCross size={12} />\n        </CloseBtn>\n        {children}\n      </ModalWindow>\n    </Overlay>,\n    backdropRootPortal\n  );\n};\n\nModal.propTypes = {\n  handleModalClose: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 50px;\n  background-color: #f8f8ff;\n  z-index: 1;\n`;\n\nexport const ModalWindow = styled.div`\n  position: relative;\n  width: calc(100% - 40px);\n  min-width: 280px;\n\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n\n  @media screen and (min-width: 768px) {\n    max-width: calc(768px - 40px);\n    margin: 0 auto;\n  }\n`;\n\nexport const CloseBtn = styled.span`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  width: 16px;\n  height: 16px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: color 250ms linear, transform 250ms linear;\n\n  &:hover,\n  &:focus {\n    color: #ff9a9a;\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n"],"names":["Form","styled","Label","InputHeading","Input","validate","SubmitBtn","ValidationMessage","ContactListItem","id","contactName","contactNumber","useState","isRemoving","setIsRemoving","isModalOpen","setIsModalOpen","dispatch","useDispatch","handleModalClose","ListItem","ContactWrap","Name","Number","ActionsWrap","CallLink","href","EditBtn","type","onClick","RemoveBtn","disabled","deleteContact","unwrap","then","response","toast","name","catch","finally","CenteredLoader","Modal","EditContactForm","commonActionsStyles","validationSchema","Yup","shape","required","min","matches","number","isLoading","useSelector","selectIsLoading","useForm","defaultValues","mode","resolver","yupResolver","formState","errors","isDirty","isValid","register","handleSubmit","reset","onSubmit","formData","editContact","changes","Heading","message","children","useEffect","handleEscKeydown","evt","key","document","addEventListener","documentElement","style","overflowY","removeEventListener","backdropRootPortal","querySelector","createPortal","Overlay","target","currentTarget","ModalWindow","CloseBtn","size","selectContacts","state","contacts","items","selectError","error"],"sourceRoot":""}