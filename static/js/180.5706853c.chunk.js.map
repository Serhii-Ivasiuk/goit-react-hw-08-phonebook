{"version":3,"file":"static/js/180.5706853c.chunk.js","mappings":"mYAGaA,EAAOC,EAAAA,EAAAA,KAAH,6YAgBJC,EAAQD,EAAAA,EAAAA,MAAH,kGAOLE,EAAeF,EAAAA,EAAAA,KAAH,oEAKZG,EAAQH,EAAAA,EAAAA,MAAH,sPAOL,qBAAGI,SACD,oBAAsB,mBADxB,IAKE,qBAAGA,SACD,oBAAsB,mBADxB,IAMFC,EAAYL,EAAAA,EAAAA,OAAH,odAyBTM,EAAoBN,EAAAA,EAAAA,KAAH,8D,wMCnDxBO,EAMGC,EAAAA,KAAaC,MAAM,CACxBC,KAAMF,EAAAA,KACHG,SAAS,oBACTC,IAAI,EAAG,yCACPC,QARH,yHAUI,+DAGJC,OAAQN,EAAAA,KACLG,SAAS,sBACTE,QAbH,6EAeI,qGAKKE,EAAkB,SAAC,GAKzB,IAAD,IAJJC,EAII,EAJJA,GACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,iBACxBC,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEhB,KAAMO,EAAaH,OAAQI,GAC5CS,KAAM,YACNC,UAAUC,EAAAA,EAAAA,GAAYtB,KARxB,IACEuB,UAAaC,EADf,EACeA,OAAQC,EADvB,EACuBA,QAASC,EADhC,EACgCA,QAC9BC,EAFF,EAEEA,SACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,MAoBF,OACE,UAAC,EAAArC,KAAD,CAAMsC,SAAUF,GAdD,SAAAG,GACff,GAASgB,EAAAA,EAAAA,aAAY,CAAEvB,GAAAA,EAAIwB,QAASF,KACjCG,SACAC,MAAK,WACJC,EAAAA,GAAAA,QAAc,8CACdxB,IACAiB,GACD,IACAQ,OAAM,kBACLD,EAAAA,GAAAA,MAAY,0DADP,GAGV,IAGC,WACE,SAAC,EAAAE,QAAD,4BACA,UAAC,EAAA5C,MAAD,YACE,SAAC,EAAAC,aAAD,oBACA,SAAC,EAAAC,OAAD,QACE2C,KAAK,OACLpC,KAAK,OACLN,SAAU2B,EAAOrB,MACbwB,EAAS,UAEdH,EAAOrB,OACN,SAAC,EAAAJ,kBAAD,oBAAoByB,EAAOrB,YAA3B,aAAoB,EAAaqC,cAIrC,UAAC,EAAA9C,MAAD,YACE,SAAC,EAAAC,aAAD,sBACA,SAAC,EAAAC,OAAD,QACE2C,KAAK,MACLpC,KAAK,SACLN,SAAU2B,EAAOjB,QACboB,EAAS,YAEdH,EAAOjB,SACN,SAAC,EAAAR,kBAAD,oBAAoByB,EAAOjB,cAA3B,aAAoB,EAAeiC,cAIvC,SAAC,EAAA1C,UAAD,CAAWyC,KAAK,SAASE,UAAWf,IAAYD,GAAWZ,EAA3D,SACGY,GAAWZ,GAAY,SAAC,EAAA6B,eAAD,IAAqB,mBAIpD,C,mFC9GYJ,E,QAAU7C,EAAAA,EAAH,sO,iJCHb,IAAMkD,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtB/B,EAAkB,SAAA6B,GAAK,OAAIA,EAAMC,SAAShC,SAAnB,EACvBkC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,C","sources":["components/Common/FormsComponents.styled.jsx","components/EditContactForm/EditContactForm.jsx","components/EditContactForm/EditContactForm.styled.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["// Libs\nimport styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  max-width: 768px;\n  margin: 0 auto;\n  padding: 16px;\n  border: 1px solid #505050;\n  border-radius: 12px;\n  background-color: #f8f8ff;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  padding-left: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled.input`\n  height: 32px;\n  padding: 16px;\n  font-size: 16px;\n  color: #505050;\n  border: none;\n  border-radius: 8px;\n  outline: ${({ validate }) =>\n    validate ? '1px solid #fc8181' : '1px solid #505050'};\n  outline-offset: -1px;\n\n  &:focus {\n    outline: ${({ validate }) =>\n      validate ? '2px solid #fc8181' : '2px solid #505050'};\n    outline-offset: -2px;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  height: 32px;\n  padding: 4px 12px;\n  min-width: 110px;\n  text-transform: uppercase;\n  font-weight: 700;\n  background-color: #008000;\n  color: #ffffff;\n  text-shadow: 1px 1px 2px #505050;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #006f00;\n  }\n\n  &:disabled {\n    cursor: initial;\n    background-color: #505050;\n  }\n`;\n\nexport const ValidationMessage = styled.span`\n  padding: 0 16px;\n  color: #fc8181;\n`;\n","// Libs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\n// Redux selectors\nimport { selectIsLoading } from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { editContact } from 'redux/contacts/contactsOperations';\n// React components\nimport { CenteredLoader } from 'components/Loaders/Loaders';\n// Styled components\nimport {\n  Form,\n  Label,\n  InputHeading,\n  Input,\n  SubmitBtn,\n  ValidationMessage,\n} from 'components/Common/FormsComponents.styled';\nimport { Heading } from './EditContactForm.styled';\n\nconst validationSchema = (() => {\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const numberRegExp =\n    /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\n  return Yup.object().shape({\n    name: Yup.string()\n      .required('Name is required')\n      .min(3, 'Name must be at least 3 letters long.')\n      .matches(\n        nameRegExp,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n\n    number: Yup.string()\n      .required('Number is required')\n      .matches(\n        numberRegExp,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with \"+\".'\n      ),\n  });\n})();\n\nexport const EditContactForm = ({\n  id,\n  contactName,\n  contactNumber,\n  handleModalClose,\n}) => {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const {\n    formState: { errors, isDirty, isValid },\n    register,\n    handleSubmit,\n    reset,\n  } = useForm({\n    defaultValues: { name: contactName, number: contactNumber },\n    mode: 'onTouched',\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = formData => {\n    dispatch(editContact({ id, changes: formData }))\n      .unwrap()\n      .then(() => {\n        toast.success('Your changes have been successfully saved.');\n        handleModalClose();\n        reset();\n      })\n      .catch(() =>\n        toast.error('Oops... Something went wrong :( Please try again later.')\n      );\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Heading>Edit contact</Heading>\n      <Label>\n        <InputHeading>Name</InputHeading>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          validate={errors.name}\n          {...register('name')}\n        />\n        {errors.name && (\n          <ValidationMessage>{errors.name?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <Label>\n        <InputHeading>Number</InputHeading>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          validate={errors.number}\n          {...register('number')}\n        />\n        {errors.number && (\n          <ValidationMessage>{errors.number?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <SubmitBtn type=\"submit\" disabled={!isValid || !isDirty || isLoading}>\n        {isDirty && isLoading ? <CenteredLoader /> : 'Save changes'}\n      </SubmitBtn>\n    </Form>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Heading = styled.p`\n  width: 100%;\n  padding-bottom: 16px;\n  font-weight: 700;\n  font-size: 20px;\n  /* text-align: center; */\n  padding-left: 16px;\n  /* text-transform: uppercase; */\n  border-bottom: 1px solid #505050;\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n"],"names":["Form","styled","Label","InputHeading","Input","validate","SubmitBtn","ValidationMessage","validationSchema","Yup","shape","name","required","min","matches","number","EditContactForm","id","contactName","contactNumber","handleModalClose","isLoading","useSelector","selectIsLoading","dispatch","useDispatch","useForm","defaultValues","mode","resolver","yupResolver","formState","errors","isDirty","isValid","register","handleSubmit","reset","onSubmit","formData","editContact","changes","unwrap","then","toast","catch","Heading","type","message","disabled","CenteredLoader","selectContacts","state","contacts","items","selectError","error"],"sourceRoot":""}