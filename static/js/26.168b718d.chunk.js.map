{"version":3,"file":"static/js/26.168b718d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/Filter/Filter.jsx","components/Filter/Filter.styled.jsx","pages/ContactsPage/ContactsPage.jsx","pages/ContactsPage/ContactsPage.styled.jsx","redux/contacts/contactsSelectors.js","redux/filter/filterSelectors.js"],"sourcesContent":["// Libs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n// Redux selectors\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { addContact } from 'redux/contacts/contactsOperations';\n// Styled components\nimport {\n  AddContactForm,\n  Label,\n  InputHeading,\n  Input,\n  SubmitBtn,\n  ValidationMessage,\n} from './ContactForm.styled';\n\nconst initialValues = { name: '', number: '' };\n\nconst validationSchema = (() => {\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const numberRegExp =\n    /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\n  return Yup.object().shape({\n    name: Yup.string()\n      .matches(\n        nameRegExp,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      )\n      .required('Name is required'),\n\n    number: Yup.string()\n      .matches(\n        numberRegExp,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with \"+\".'\n      )\n      .required('Number is required'),\n  });\n})();\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const { name, number } = values;\n    const { resetForm } = actions;\n\n    const isExistName = contacts.some(item => item.name === name);\n    const isExistNumber = contacts.find(item => item.number === number);\n\n    if (isExistName) {\n      return alert(`Contact with name \"${name}\" is already in contacts`);\n    } else if (isExistNumber) {\n      return alert(\n        `Number \"${number}\" is already in contacts with name \"${isExistNumber.name}\"`\n      );\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n\n    document.activeElement.blur();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n      validateOnBlur={false}\n    >\n      {({ dirty, isValid, errors, touched }) => {\n        return (\n          <AddContactForm autoComplete=\"off\">\n            <Label>\n              <InputHeading>Name</InputHeading>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                validate={errors.name && touched.name}\n              />\n              <ValidationMessage name=\"name\" component=\"span\" />\n            </Label>\n            <Label>\n              <InputHeading>Number</InputHeading>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                validate={errors.number && touched.number}\n              />\n              <ValidationMessage name=\"number\" component=\"span\" />\n            </Label>\n            <SubmitBtn disabled={!dirty || !isValid} type=\"submit\">\n              Add contact\n            </SubmitBtn>\n          </AddContactForm>\n        );\n      }}\n    </Formik>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const AddContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  padding: 16px;\n  border: 1px solid #505050;\n  border-radius: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  padding-left: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  height: 32px;\n  padding: 16px;\n  font-size: 16px;\n  color: #505050;\n  border: none;\n  border-radius: 8px;\n  outline: ${({ validate }) =>\n    validate ? '1px solid #fc8181' : '1px solid #505050'};\n  outline-offset: -1px;\n\n  &:focus {\n    outline: ${({ validate }) =>\n      validate ? '2px solid #fc8181' : '2px solid #505050'};\n    outline-offset: -2px;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  height: 32px;\n  padding: 4px 16px;\n  text-transform: uppercase;\n  font-weight: 700;\n  background-color: #008000;\n  color: #ffffff;\n  text-shadow: 1px 1px 2px #505050;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #006f00;\n  }\n\n  :disabled {\n    cursor: initial;\n    background-color: #505050;\n  }\n`;\n\nexport const ValidationMessage = styled(ErrorMessage)`\n  padding: 0 16px;\n  color: #fc8181;\n`;\n","// Libs\nimport { useSelector } from 'react-redux';\n// React components\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n// Redux selectors\nimport { getContacts } from 'redux/contacts/contactsSelectors';\nimport { getFilter } from 'redux/filter/filterSelectors';\n// Styled components\nimport { InfoMessage, List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filteredAndSortedContacts = contacts\n    .filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\n    .sort((a, b) => a.name.localeCompare(b.name));\n\n  return (\n    <>\n      {filteredAndSortedContacts.length === 0 && (\n        <InfoMessage>\n          Contacts not found. Please, try to change your request.\n        </InfoMessage>\n      )}\n\n      <List>\n        {filteredAndSortedContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListItem\n              key={id}\n              id={id}\n              contactName={name}\n              contactNumber={number}\n            />\n          );\n        })}\n      </List>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n  text-align: center;\n  color: #505050;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n","// Libs\nimport PropTypes from 'prop-types';\n// Redux operations\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n// Styled components\nimport { ListItem, Text, Number, RemoveBtn } from './ContactListItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nexport const ContactListItem = ({ id, contactName, contactNumber }) => {\n  const [isRemoving, setIsRemoving] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleRemoveContact = () => {\n    setIsRemoving(true);\n\n    dispatch(deleteContact(id)).finally(() => {\n      setIsRemoving(false);\n    });\n  };\n\n  return (\n    <ListItem>\n      <Text>\n        {contactName}: <Number>{contactNumber}</Number>\n      </Text>\n\n      <RemoveBtn\n        type=\"button\"\n        disabled={isRemoving}\n        onClick={handleRemoveContact}\n      >\n        Remove\n      </RemoveBtn>\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  height: 32px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: 1px solid #505050;\n  padding: 0 0 0 16px;\n  border-radius: 16px;\n  background-color: #ffffff;\n  overflow: hidden;\n`;\n\nexport const Text = styled.span`\n  font-weight: 500;\n`;\n\nexport const Number = styled.span`\n  font-weight: 400;\n`;\n\nexport const RemoveBtn = styled.button`\n  padding: 0 16px 0;\n  height: 100%;\n  font-weight: 700;\n  text-transform: uppercase;\n  color: #ffffff;\n  border: none;\n  background-color: #ffc800;\n  text-shadow: 1px 1px 2px #505050;\n  transition: background-color 250ms linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #e7b500;\n  }\n\n  &:disabled {\n    background-color: #505050;\n  }\n`;\n","// Libs\nimport { useDispatch, useSelector } from 'react-redux';\n// Redux selectors\nimport { getFilter } from 'redux/filter/filterSelectors';\n// Redux actions\nimport { filterContacts } from 'redux/filter/filterSlice';\n// Styled components\nimport { Label, InputHeading, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterInput = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <Label>\n      <InputHeading>Find contacts by name</InputHeading>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        title=\"Please enter a name to find your contacts\"\n        value={filter}\n        onChange={handleFilterInput}\n      />\n    </Label>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  margin-bottom: 4px;\n  font-weight: 700;\n  padding: 0 16px;\n`;\n\nexport const Input = styled.input`\n  height: 32px;\n  padding: 0 16px;\n  font-size: 16px;\n  color: #505050;\n  border: 1px solid #505050;\n  border-radius: 8px;\n`;\n","// Libs\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// React components\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n// Redux selectors\nimport {\n  getContacts,\n  getError,\n  getIsLoading,\n} from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n// Styled components\nimport {\n  ContactsPageWrap,\n  Section,\n  MainTitle,\n  SectionTitle,\n  ContactsWrapper,\n  InfoMessage,\n  ErrorMessage,\n} from './ContactsPage.styled';\n\nexport const ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n  const loading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsPageWrap>\n      <Section>\n        <MainTitle>Phonebook</MainTitle>\n        <ContactForm />\n      </Section>\n\n      <Section>\n        <SectionTitle>Contacts</SectionTitle>\n        <ContactsWrapper>\n          {contacts.length !== 0 && (\n            <>\n              <Filter />\n              <ContactList />\n            </>\n          )}\n\n          {loading && <InfoMessage>Loading...</InfoMessage>}\n\n          {error && <ErrorMessage>{error}</ErrorMessage>}\n\n          {!loading && !error && contacts.length === 0 && (\n            <InfoMessage>\n              There is no contacts yet. Use the form above to add your first\n              contact.\n            </InfoMessage>\n          )}\n        </ContactsWrapper>\n      </Section>\n    </ContactsPageWrap>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const ContactsPageWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  height: 100%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const MainTitle = styled.h1`\n  padding-left: 32px;\n`;\n\nexport const SectionTitle = styled.h2`\n  padding-left: 32px;\n`;\n\nexport const ContactsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  border: 1px solid #505050;\n  padding: 16px;\n  border-radius: 12px;\n`;\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n  text-align: center;\n  color: #505050;\n`;\n\nexport const ErrorMessage = styled.p`\n  font-weight: 700;\n  text-align: center;\n  color: #fc8181;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","export const getFilter = state => state.filter.filter;\n"],"names":["initialValues","name","number","validationSchema","Yup","shape","matches","required","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","onSubmit","values","actions","resetForm","isExistName","some","item","isExistNumber","find","alert","newContact","addContact","document","activeElement","blur","validateOnBlur","dirty","isValid","errors","touched","AddContactForm","autoComplete","Label","InputHeading","Input","type","title","validate","ValidationMessage","component","SubmitBtn","disabled","styled","Form","Field","ErrorMessage","ContactList","filter","getFilter","filteredAndSortedContacts","toLowerCase","includes","sort","a","b","localeCompare","length","InfoMessage","List","map","id","ContactListItem","contactName","contactNumber","useState","isRemoving","setIsRemoving","ListItem","Text","Number","RemoveBtn","onClick","deleteContact","finally","Filter","value","onChange","event","filterContacts","target","ContactsPage","loading","getIsLoading","error","getError","useEffect","fetchContacts","ContactsPageWrap","Section","MainTitle","SectionTitle","ContactsWrapper","state","items","isLoading"],"sourceRoot":""}