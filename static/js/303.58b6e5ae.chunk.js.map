{"version":3,"file":"static/js/303.58b6e5ae.chunk.js","mappings":"4QAQMA,EAIGC,EAAAA,KACJC,MAAM,CACLC,KAAMF,EAAAA,KAAaG,SAAS,qBAC5BC,MAAOJ,EAAAA,KACJG,SAAS,sBACTE,QAPL,uJAO0B,gCACxBC,SAAUN,EAAAA,KACPG,SAAS,yBACTI,IACC,EACA,gGAGLJ,WAGQK,EAAmB,WAAO,IAAD,MAC9BC,GAAWC,EAAAA,EAAAA,MAEjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYd,KALtBe,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAUF,OACE,kBAAMC,SAAUJ,GAND,SAAAK,GACfX,GAASY,EAAAA,EAAAA,cAAaD,IACtBF,GACD,IAGC,WACE,8BACE,oCACA,0BAAOI,KAAK,OAAOpB,KAAK,QAAWY,EAAS,UAC3CE,EAAOd,OAAQ,oCAAOc,EAAOd,YAAd,aAAO,EAAaqB,cAGtC,8BACE,qCACA,0BAAOD,KAAK,QAAQpB,KAAK,SAAYY,EAAS,WAC7CE,EAAOZ,QAAS,oCAAOY,EAAOZ,aAAd,aAAO,EAAcmB,cAGxC,8BACE,wCACA,0BAAOD,KAAK,WAAWpB,KAAK,YAAeY,EAAS,cACnDE,EAAOV,WAAY,oCAAOU,EAAOV,gBAAd,aAAO,EAAiBiB,cAG9C,mBAAQD,KAAK,SAAb,wBAGL,C","sources":["components/RegistrationForm/RegistrationForm.jsx"],"sourcesContent":["// Libs\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n// Redux operations\nimport { registerUser } from 'redux/auth/authOperations';\n\nconst validationSchema = (() => {\n  const emailRegExp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  return Yup.object()\n    .shape({\n      name: Yup.string().required('Name is required.'),\n      email: Yup.string()\n        .required('Email is required.')\n        .matches(emailRegExp, 'Email must be a valid email.'),\n      password: Yup.string()\n        .required('Password is required.')\n        .min(\n          8,\n          'Password must be at least 8 characters long and including min 4 letters and min 4 numbers.'\n        ),\n    })\n    .required();\n})();\n\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = formData => {\n    dispatch(registerUser(formData));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>\n        <span>Name</span>\n        <input type=\"text\" name=\"name\" {...register('name')} />\n        {errors.name && <span>{errors.name?.message}</span>}\n      </label>\n\n      <label>\n        <span>Email</span>\n        <input type=\"email\" name=\"email\" {...register('email')} />\n        {errors.email && <span>{errors.email?.message}</span>}\n      </label>\n\n      <label>\n        <span>Password</span>\n        <input type=\"password\" name=\"password\" {...register('password')} />\n        {errors.password && <span>{errors.password?.message}</span>}\n      </label>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n"],"names":["validationSchema","Yup","shape","name","required","email","matches","password","min","RegistrationForm","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","formData","registerUser","type","message"],"sourceRoot":""}