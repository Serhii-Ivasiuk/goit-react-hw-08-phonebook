{"version":3,"file":"static/js/589.3ac6623e.chunk.js","mappings":"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","sources":["../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","../node_modules/@hookform/resolvers/yup/src/yup.ts","components/RegistrationForm/RegistrationForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  appendErrors,\n  FieldError,\n  FieldValues,\n  Resolver,\n} from 'react-hook-form';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema: Yup.ObjectSchema<TFieldValues>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<TFieldValues> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n","// Libs\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n// Redux operations\nimport { registerUser } from 'redux/auth/authOperations';\n\nconst validationSchema = (() => {\n  const emailRegExp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  return Yup.object()\n    .shape({\n      name: Yup.string().required('Name is required.'),\n      email: Yup.string()\n        .required('Email is required.')\n        .matches(emailRegExp, 'Email must be a valid email.'),\n      password: Yup.string()\n        .required('Password is required.')\n        .min(\n          8,\n          'Password must be at least 8 characters long and including min 4 letters and min 4 numbers.'\n        ),\n    })\n    .required();\n})();\n\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = formData => {\n    dispatch(registerUser(formData));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>\n        <span>Name</span>\n        <input type=\"text\" name=\"name\" {...register('name')} />\n        {errors.name && <span>{errors.name?.message}</span>}\n      </label>\n\n      <label>\n        <span>Email</span>\n        <input type=\"email\" name=\"email\" {...register('email')} />\n        {errors.email && <span>{errors.email?.message}</span>}\n      </label>\n\n      <label>\n        <span>Password</span>\n        <input type=\"password\" name=\"password\" {...register('password')} />\n        {errors.password && <span>{errors.password?.message}</span>}\n      </label>\n\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n","// React components\nimport { RegistrationForm } from 'components/RegistrationForm/RegistrationForm';\n\nexport const RegisterPage = () => {\n  return <RegistrationForm />;\n};\n"],"names":["error","errors","get","message","ref","reportValidity","validateFieldsNatively","options","field","fields","refs","forEach","_loop","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Promise","resolve","process","env","NODE_ENV","console","warn","resolverOptions","context","mode","Object","raw","_catch","e","inner","schema","validateAllFieldCriteria","criteriaMode","reduce","previous","type","types","messages","appendErrors","validationSchema","Yup","shape","name","required","email","matches","password","min","RegistrationForm","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","formState","reset","onSubmit","formData","registerUser","RegisterPage"],"sourceRoot":""}