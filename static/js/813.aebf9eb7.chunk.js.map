{"version":3,"file":"static/js/813.aebf9eb7.chunk.js","mappings":"gRAkBMA,EAAgB,CAAEC,KAAM,GAAIC,OAAQ,IAEpCC,EAMGC,EAAAA,KAAaC,MAAM,CACxBJ,KAAMG,EAAAA,KACHE,QANH,yHAQI,+DAEDC,SAAS,oBAEZL,OAAQE,EAAAA,KACLE,QAXH,6EAaI,mGAEDC,SAAS,wBAIHC,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,aACvBC,GAAWC,EAAAA,EAAAA,MA6BjB,OACE,SAAC,KAAD,CACEb,cAAeA,EACfG,iBAAkBA,EAClBW,SA/BiB,SAACC,EAAQC,GAC5B,IAAQf,EAAiBc,EAAjBd,KAAMC,EAAWa,EAAXb,OACNe,EAAcD,EAAdC,UAEFC,EAAcT,EAASU,MAAK,SAAAC,GAAI,OAAIA,EAAKnB,OAASA,CAAlB,IAChCoB,EAAgBZ,EAASa,MAAK,SAAAF,GAAI,OAAIA,EAAKlB,SAAWA,CAApB,IAExC,GAAIgB,EACF,OAAOK,MAAM,sBAAD,OAAuBtB,EAAvB,6BACP,GAAIoB,EACT,OAAOE,MAAM,WAAD,OACCrB,EADD,+CAC8CmB,EAAcpB,KAD5D,MAKd,IAAMuB,EAAa,CACjBvB,KAAAA,EACAC,OAAAA,GAGFU,GAASa,EAAAA,EAAAA,YAAWD,IAEpBP,IAEAS,SAASC,cAAcC,MACxB,EAOGC,gBAAgB,EAJlB,SAMG,YAA0C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAAC,EAAAC,eAAD,CAAgBC,aAAa,MAA7B,WACE,UAAC,EAAAC,MAAD,YACE,SAAC,EAAAC,aAAD,oBACA,SAAC,EAAAC,MAAD,CACEC,KAAK,OACLtC,KAAK,OACLuC,MAAM,yIACNC,SAAUT,EAAO/B,MAAQgC,EAAQhC,QAEnC,SAAC,EAAAyC,kBAAD,CAAmBzC,KAAK,OAAO0C,UAAU,aAE3C,UAAC,EAAAP,MAAD,YACE,SAAC,EAAAC,aAAD,sBACA,SAAC,EAAAC,MAAD,CACEC,KAAK,MACLtC,KAAK,SACLuC,MAAM,+FACNC,SAAUT,EAAO9B,QAAU+B,EAAQ/B,UAErC,SAAC,EAAAwC,kBAAD,CAAmBzC,KAAK,SAAS0C,UAAU,aAE7C,SAAC,EAAAC,UAAD,CAAWC,UAAWf,IAAUC,EAASQ,KAAK,SAA9C,2BAKL,GAGN,C,sRC5GYL,GAAiBY,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,mMAWdV,EAAQU,EAAAA,EAAAA,MAAH,kGAOLT,EAAeS,EAAAA,EAAAA,KAAH,oEAKZR,GAAQQ,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,sPAOL,qBAAGL,SACD,oBAAsB,mBADxB,IAKE,qBAAGA,SACD,oBAAsB,mBADxB,IAMFG,EAAYE,EAAAA,EAAAA,OAAH,8bAwBTJ,GAAoBI,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,8D,wICrEvB,IAAMnC,EAAc,SAAAuC,GAAK,OAAIA,EAAMzC,SAAS0C,KAAnB,EACnBC,EAAe,SAAAF,GAAK,OAAIA,EAAMzC,SAAS4C,SAAnB,EACpBC,EAAW,SAAAJ,GAAK,OAAIA,EAAMzC,SAAS8C,KAAnB,C","sources":["components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["// Libs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n// Redux selectors\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { addContact } from 'redux/contacts/contactsOperations';\n// Styled components\nimport {\n  AddContactForm,\n  Label,\n  InputHeading,\n  Input,\n  SubmitBtn,\n  ValidationMessage,\n} from './ContactForm.styled';\n\nconst initialValues = { name: '', number: '' };\n\nconst validationSchema = (() => {\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const numberRegExp =\n    /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\n  return Yup.object().shape({\n    name: Yup.string()\n      .matches(\n        nameRegExp,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      )\n      .required('Name is required'),\n\n    number: Yup.string()\n      .matches(\n        numberRegExp,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with \"+\".'\n      )\n      .required('Number is required'),\n  });\n})();\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    const { name, number } = values;\n    const { resetForm } = actions;\n\n    const isExistName = contacts.some(item => item.name === name);\n    const isExistNumber = contacts.find(item => item.number === number);\n\n    if (isExistName) {\n      return alert(`Contact with name \"${name}\" is already in contacts`);\n    } else if (isExistNumber) {\n      return alert(\n        `Number \"${number}\" is already in contacts with name \"${isExistNumber.name}\"`\n      );\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n\n    resetForm();\n\n    document.activeElement.blur();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n      validateOnBlur={false}\n    >\n      {({ dirty, isValid, errors, touched }) => {\n        return (\n          <AddContactForm autoComplete=\"off\">\n            <Label>\n              <InputHeading>Name</InputHeading>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                validate={errors.name && touched.name}\n              />\n              <ValidationMessage name=\"name\" component=\"span\" />\n            </Label>\n            <Label>\n              <InputHeading>Number</InputHeading>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                validate={errors.number && touched.number}\n              />\n              <ValidationMessage name=\"number\" component=\"span\" />\n            </Label>\n            <SubmitBtn disabled={!dirty || !isValid} type=\"submit\">\n              Add contact\n            </SubmitBtn>\n          </AddContactForm>\n        );\n      }}\n    </Formik>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const AddContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  padding: 16px;\n  border: 1px solid #505050;\n  border-radius: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  padding-left: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  height: 32px;\n  padding: 16px;\n  font-size: 16px;\n  color: #505050;\n  border: none;\n  border-radius: 8px;\n  outline: ${({ validate }) =>\n    validate ? '1px solid #fc8181' : '1px solid #505050'};\n  outline-offset: -1px;\n\n  &:focus {\n    outline: ${({ validate }) =>\n      validate ? '2px solid #fc8181' : '2px solid #505050'};\n    outline-offset: -2px;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  height: 32px;\n  padding: 4px 16px;\n  text-transform: uppercase;\n  font-weight: 700;\n  background-color: #008000;\n  color: #ffffff;\n  text-shadow: 1px 1px 2px #505050;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #006f00;\n  }\n\n  :disabled {\n    cursor: initial;\n    background-color: #505050;\n  }\n`;\n\nexport const ValidationMessage = styled(ErrorMessage)`\n  padding: 0 16px;\n  color: #fc8181;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n"],"names":["initialValues","name","number","validationSchema","Yup","shape","matches","required","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","onSubmit","values","actions","resetForm","isExistName","some","item","isExistNumber","find","alert","newContact","addContact","document","activeElement","blur","validateOnBlur","dirty","isValid","errors","touched","AddContactForm","autoComplete","Label","InputHeading","Input","type","title","validate","ValidationMessage","component","SubmitBtn","disabled","styled","Form","Field","ErrorMessage","state","items","getIsLoading","isLoading","getError","error"],"sourceRoot":""}