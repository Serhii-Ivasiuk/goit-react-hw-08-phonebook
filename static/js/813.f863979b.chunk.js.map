{"version":3,"file":"static/js/813.f863979b.chunk.js","mappings":"mSAmBMA,EAMGC,EAAAA,KAAaC,MAAM,CACxBC,KAAMF,EAAAA,KACHG,SAAS,oBACTC,QAPH,yHASI,+DAGJC,OAAQL,EAAAA,KACLG,SAAS,sBACTC,QAZH,6EAcI,qGAKFE,EAAe,CACnBC,cAAe,CAAEL,KAAM,GAAIG,OAAQ,IACnCG,KAAM,YACNC,UAAUC,EAAAA,EAAAA,GAAYX,IAGXY,EAAc,WAAO,IAAD,IACzBC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,aACvBC,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQX,GAJVY,EADF,EACEA,SACAC,EAFF,EAEEA,aAFF,IAGEC,UAAaC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,QAASC,EAHhC,EAGgCA,QAC9BC,EAJF,EAIEA,MA0BF,OACE,UAAC,EAAAC,KAAD,CAAMC,SAAUP,GAxBD,SAAAQ,GACf,IAAMC,EAAchB,EAASiB,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,OAASyB,EAASzB,IAA3B,IAChC6B,EAAgBnB,EAASoB,MAC7B,SAAAF,GAAI,OAAIA,EAAKzB,SAAWsB,EAAStB,MAA7B,IAGN,OAAIuB,EACKK,MAAM,sBAAD,OACYN,EAASzB,KADrB,6BAGH6B,EACFE,MAAM,WAAD,OACCN,EAAStB,OADV,+CACuD0B,EAAc7B,KADrE,OAKda,GAASmB,EAAAA,EAAAA,YAAWP,IAEpBH,SAEAW,SAASC,cAAcC,OACxB,IAGC,WACE,UAAC,EAAAC,MAAD,YACE,SAAC,EAAAC,aAAD,oBACA,SAAC,EAAAC,OAAD,QACEC,KAAK,OACLvC,KAAK,OACLwC,SAAUrB,EAAOnB,MACbgB,EAAS,UAEdG,EAAOnB,OACN,SAAC,EAAAyC,kBAAD,oBAAoBtB,EAAOnB,YAA3B,aAAoB,EAAa0C,cAIrC,UAAC,EAAAN,MAAD,YACE,SAAC,EAAAC,aAAD,sBACA,SAAC,EAAAC,OAAD,QACEC,KAAK,MACLvC,KAAK,SACLwC,SAAUrB,EAAOhB,QACba,EAAS,YAEdG,EAAOhB,SACN,SAAC,EAAAsC,kBAAD,oBAAoBtB,EAAOhB,cAA3B,aAAoB,EAAeuC,cAIvC,SAAC,EAAAC,UAAD,CAAWJ,KAAK,SAASK,UAAWvB,IAAYD,EAAhD,2BAKL,C,kQC/GYG,EAAOsB,EAAAA,EAAAA,KAAH,mMAWJT,EAAQS,EAAAA,EAAAA,MAAH,kGAOLR,EAAeQ,EAAAA,EAAAA,KAAH,oEAKZP,EAAQO,EAAAA,EAAAA,MAAH,sPAOL,qBAAGL,SACD,oBAAsB,mBADxB,IAKE,qBAAGA,SACD,oBAAsB,mBADxB,IAMFG,EAAYE,EAAAA,EAAAA,OAAH,8bAwBTJ,EAAoBI,EAAAA,EAAAA,KAAH,8D,wICpEvB,IAAMjC,EAAc,SAAAkC,GAAK,OAAIA,EAAMpC,SAASqC,KAAnB,EACnBC,EAAe,SAAAF,GAAK,OAAIA,EAAMpC,SAASuC,SAAnB,EACpBC,EAAW,SAAAJ,GAAK,OAAIA,EAAMpC,SAASyC,KAAnB,C","sources":["components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/contactsSelectors.js"],"sourcesContent":["// Libs\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n// Redux selectors\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n// Redux operations\nimport { addContact } from 'redux/contacts/contactsOperations';\n// Styled components\nimport {\n  Form,\n  Label,\n  InputHeading,\n  Input,\n  SubmitBtn,\n  ValidationMessage,\n} from './ContactForm.styled';\n\nconst validationSchema = (() => {\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const numberRegExp =\n    /^\\+?\\d{1,4}[-.\\s]?\\(?\\d{1,3}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\n  return Yup.object().shape({\n    name: Yup.string()\n      .required('Name is required')\n      .matches(\n        nameRegExp,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n\n    number: Yup.string()\n      .required('Number is required')\n      .matches(\n        numberRegExp,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with \"+\".'\n      ),\n  });\n})();\n\nconst formSettings = {\n  defaultValues: { name: '', number: '' },\n  mode: 'onTouched',\n  resolver: yupResolver(validationSchema),\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isDirty, isValid },\n    reset,\n  } = useForm(formSettings);\n\n  const onSubmit = formData => {\n    const isExistName = contacts.some(item => item.name === formData.name);\n    const isExistNumber = contacts.find(\n      item => item.number === formData.number\n    );\n\n    if (isExistName) {\n      return alert(\n        `Contact with name \"${formData.name}\" is already in contacts`\n      );\n    } else if (isExistNumber) {\n      return alert(\n        `Number \"${formData.number}\" is already in contacts with name \"${isExistNumber.name}\"`\n      );\n    }\n\n    dispatch(addContact(formData));\n\n    reset();\n\n    document.activeElement.blur();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Label>\n        <InputHeading>Name</InputHeading>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          validate={errors.name}\n          {...register('name')}\n        />\n        {errors.name && (\n          <ValidationMessage>{errors.name?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <Label>\n        <InputHeading>Number</InputHeading>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          validate={errors.number}\n          {...register('number')}\n        />\n        {errors.number && (\n          <ValidationMessage>{errors.number?.message}</ValidationMessage>\n        )}\n      </Label>\n\n      <SubmitBtn type=\"submit\" disabled={!isValid || !isDirty}>\n        Add contact\n      </SubmitBtn>\n    </Form>\n  );\n};\n","// Libs\nimport styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  width: 100%;\n  padding: 16px;\n  border: 1px solid #505050;\n  border-radius: 12px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nexport const InputHeading = styled.span`\n  padding-left: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled.input`\n  height: 32px;\n  padding: 16px;\n  font-size: 16px;\n  color: #505050;\n  border: none;\n  border-radius: 8px;\n  outline: ${({ validate }) =>\n    validate ? '1px solid #fc8181' : '1px solid #505050'};\n  outline-offset: -1px;\n\n  &:focus {\n    outline: ${({ validate }) =>\n      validate ? '2px solid #fc8181' : '2px solid #505050'};\n    outline-offset: -2px;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  height: 32px;\n  padding: 4px 16px;\n  text-transform: uppercase;\n  font-weight: 700;\n  background-color: #008000;\n  color: #ffffff;\n  text-shadow: 1px 1px 2px #505050;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: #006f00;\n  }\n\n  :disabled {\n    cursor: initial;\n    background-color: #505050;\n  }\n`;\n\nexport const ValidationMessage = styled.span`\n  padding: 0 16px;\n  color: #fc8181;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n"],"names":["validationSchema","Yup","shape","name","required","matches","number","formSettings","defaultValues","mode","resolver","yupResolver","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","useForm","register","handleSubmit","formState","errors","isDirty","isValid","reset","Form","onSubmit","formData","isExistName","some","item","isExistNumber","find","alert","addContact","document","activeElement","blur","Label","InputHeading","Input","type","validate","ValidationMessage","message","SubmitBtn","disabled","styled","state","items","getIsLoading","isLoading","getError","error"],"sourceRoot":""}